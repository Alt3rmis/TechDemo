In this project, no third-party libraries are used. There is only a model from third party[1].

For generator part, the terrain generation is based on Perlin noise generation. Furthermore, evolution algorithm is applied into this generator. In the evolutionary algorithm, it divides the parent map into several chunks and crossovers these chunks to get the child. The fitness function in the algorithm evaluates the percentage of water, land, mountain and snow. However, this fitness function doesn't work very well at this time because the crossover chunks are very limited, and the results are not very varied.

For the agent part, some of the code is inspired by the Unity Movement AI[1]. However, the Sequence Flocking Unit is created by myself. Most logic is written by myself. And the code is refactored to get better performance and a better structure for my purpose of use. The Sequence Flocking Unit uses steering and waypoints to move from one waypoint to the next. And the flocking feature is implemented by adding multiple velocities together with the weighted cohesion and separation parameters. Those waypoints are generated by an algorithm, which can identify the interesting point from the generated map. In this case, the interesting point can be defined by users or the algorithm will take the highest point on the map as the interesting point.

VIDEO URL: https://youtu.be/Lx35yQidKJM


References:

[1]:https://github.com/sturdyspoon/unity-movement-ai